//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Testing.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Addition", ReplyAction="http://tempuri.org/IService1/AdditionResponse")]
        int Addition(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Addition", ReplyAction="http://tempuri.org/IService1/AdditionResponse")]
        System.Threading.Tasks.Task<int> AdditionAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Subtraction", ReplyAction="http://tempuri.org/IService1/SubtractionResponse")]
        int Subtraction(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Subtraction", ReplyAction="http://tempuri.org/IService1/SubtractionResponse")]
        System.Threading.Tasks.Task<int> SubtractionAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Factorial", ReplyAction="http://tempuri.org/IService1/FactorialResponse")]
        int Factorial(int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Factorial", ReplyAction="http://tempuri.org/IService1/FactorialResponse")]
        System.Threading.Tasks.Task<int> FactorialAsync(int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EvenOrOdd", ReplyAction="http://tempuri.org/IService1/EvenOrOddResponse")]
        string EvenOrOdd(int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EvenOrOdd", ReplyAction="http://tempuri.org/IService1/EvenOrOddResponse")]
        System.Threading.Tasks.Task<string> EvenOrOddAsync(int a);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Testing.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Testing.ServiceReference1.IService1>, Testing.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Addition(int a, int b) {
            return base.Channel.Addition(a, b);
        }
        
        public System.Threading.Tasks.Task<int> AdditionAsync(int a, int b) {
            return base.Channel.AdditionAsync(a, b);
        }
        
        public int Subtraction(int a, int b) {
            return base.Channel.Subtraction(a, b);
        }
        
        public System.Threading.Tasks.Task<int> SubtractionAsync(int a, int b) {
            return base.Channel.SubtractionAsync(a, b);
        }
        
        public int Factorial(int a) {
            return base.Channel.Factorial(a);
        }
        
        public System.Threading.Tasks.Task<int> FactorialAsync(int a) {
            return base.Channel.FactorialAsync(a);
        }
        
        public string EvenOrOdd(int a) {
            return base.Channel.EvenOrOdd(a);
        }
        
        public System.Threading.Tasks.Task<string> EvenOrOddAsync(int a) {
            return base.Channel.EvenOrOddAsync(a);
        }
    }
}
